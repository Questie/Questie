local cata = require('data.cataQuestDB')
local mop = require('data.mopQuestDB')
local mopTrinity = require('data.mopQuestDB-trinity')

local printToFile = require('printToFile')

local function starts_with(str, start)
    return str:sub(1, #start) == start
end

local questKeys = {
    ['name'] = 1, -- string
    ['startedBy'] = 2, -- table
    --['creatureStart'] = 1, -- table {creature(int),...}
    --['objectStart'] = 2, -- table {object(int),...}
    --['itemStart'] = 3, -- table {item(int),...}
    ['finishedBy'] = 3, -- table
    --['creatureEnd'] = 1, -- table {creature(int),...}
    --['objectEnd'] = 2, -- table {object(int),...}
    ['requiredLevel'] = 4, -- int
    ['questLevel'] = 5, -- int
    ['requiredRaces'] = 6, -- bitmask
    ['requiredClasses'] = 7, -- bitmask
    ['objectivesText'] = 8, -- table: {string,...}, Description of the quest. Auto-complete if nil.
    ['triggerEnd'] = 9, -- table: {text, {[zoneID] = {coordPair,...},...}}
    ['objectives'] = 10, -- table
    --['creatureObjective'] = 1, -- table {{creature(int), text(string)},...}, If text is nil the default "<Name> slain x/y" is used
    --['objectObjective'] = 2, -- table {{object(int), text(string)},...}
    --['itemObjective'] = 3, -- table {{item(int), text(string)},...}
    --['reputationObjective'] = 4, -- table: {faction(int), value(int)}
    --['killCreditObjective'] = 5, -- table: {{creature(int), ...}, baseCreatureID, baseCreatureText}
    --['spellObjective'] = 6, -- table: {{spell(int), text(string)},...}
    ['sourceItemId'] = 11, -- int, item provided by quest starter
    ['preQuestGroup'] = 12, -- table: {quest(int)}
    ['preQuestSingle'] = 13, -- table: {quest(int)}
    ['childQuests'] = 14, -- table: {quest(int)}
    ['inGroupWith'] = 15, -- table: {quest(int)}
    ['exclusiveTo'] = 16, -- table: {quest(int)}
    ['zoneOrSort'] = 17, -- int, >0: AreaTable.dbc ID; <0: QuestSort.dbc ID
    ['requiredSkill'] = 18, -- table: {skill(int), value(int)}
    ['requiredMinRep'] = 19, -- table: {faction(int), value(int)}
    ['requiredMaxRep'] = 20, -- table: {faction(int), value(int)}
    ['requiredSourceItems'] = 21, -- table: {item(int), ...} Items that are not an objective but still needed for the quest.
    ['nextQuestInChain'] = 22, -- int: if this quest is active/finished, the current quest is not available anymore
    ['questFlags'] = 23, -- bitmask: see https://github.com/cmangos/issues/wiki/Quest_template#questflags
    ['specialFlags'] = 24, -- bitmask: 1 = Repeatable, 2 = Needs event, 4 = Monthly reset (req. 1). See https://github.com/cmangos/issues/wiki/Quest_template#specialflags
    ['parentQuest'] = 25, -- int, the ID of the parent quest that needs to be active for the current one to be available. See also 'childQuests' (field 14)
    ['reputationReward'] = 26, -- table: {{FACTION,VALUE}, ...}, A list of reputation reward for factions
    ['extraObjectives'] = 27, -- table: {{spawnlist, iconFile, text, objectiveIndex (optional), {{dbReferenceType, id}, ...} (optional)},...}, a list of hidden special objectives for a quest. Similar to requiredSourceItems
    ['requiredSpell'] = 28, -- int: quest is only available if character has this spellID
    ['requiredSpecialization'] = 29, -- int: quest is only available if character meets the spec requirements. Use QuestieProfessions.specializationKeys for having a spec, or QuestieProfessions.professionKeys to indicate having the profession with no spec. See QuestieProfessions.lua for more info.
    ['requiredMaxLevel'] = 30, -- int: quest is only available up to a certain level
}

for questId, data in pairs(mop) do
    local cataQuest = cata[questId]
    local trinityQuest = mopTrinity[questId]

    if cataQuest then
        mop[questId] = cataQuest
        mop[questId][questKeys.requiredRaces] = data[questKeys.requiredRaces] -- Rollback requiredRaces change, because cata data is incorrect for sure.

        -- Only take race and class requirements from MoP for cata quests, because Pandaren and Monks were added.
        if mop[questId][questKeys.requiredRaces] == 0 and trinityQuest and trinityQuest[questKeys.requiredRaces] ~= 0 then
            mop[questId][questKeys.requiredRaces] = trinityQuest[questKeys.requiredRaces]
        end
        if data[questKeys.requiredClasses] then
            mop[questId][questKeys.requiredClasses] = data[questKeys.requiredClasses]
        end

        if trinityQuest and trinityQuest[questKeys.objectivesText] and next(trinityQuest[questKeys.objectivesText]) and starts_with(trinityQuest[questKeys.objectivesText][1], "Reach level 3") then
            -- The starting zone quests have been updates for MoP, but that is not reflected in the Skyfire DB. So we take the name and objectivesText from Trinity.
            mop[questId][questKeys.name] = trinityQuest[questKeys.name]
            mop[questId][questKeys.objectivesText] = trinityQuest[questKeys.objectivesText]
        end
    else
        if trinityQuest then
            mop[questId][questKeys.requiredRaces] = trinityQuest[questKeys.requiredRaces] -- Always take Trinity requiredRaces, because it has actual data.
            -- iterate questKeys and take the values from mopTrinity if mop doesn't have them
            for _, index in pairs(questKeys) do
                if not data[index] and trinityQuest[index] and index ~= questKeys.requiredRaces then
                    mop[questId][index] = trinityQuest[index]
                end
            end

            local nextQuestInChain = trinityQuest[questKeys.nextQuestInChain]
            if nextQuestInChain then
                local nextQuest = mop[nextQuestInChain]
                if nextQuest and (not nextQuest[questKeys.preQuestSingle]) and (not nextQuest[questKeys.preQuestGroup]) then
                    -- Quest does not have pre-quest, so we add the current quest as pre-quest.
                    -- This is not 100% correct, but it will be easier to manually fix invalid breadcrumb quests, than adding pre-quests to all quests.
                    mop[nextQuestInChain][questKeys.preQuestSingle] = {questId}
                end
            end
        end

        local nextQuestInChain = data[questKeys.nextQuestInChain]
        if nextQuestInChain then
            local nextQuest = mop[nextQuestInChain]
            local cataNextQuest = cata[nextQuestInChain]
            if nextQuest and (not cataNextQuest) and (not nextQuest[questKeys.preQuestSingle]) and (not nextQuest[questKeys.preQuestGroup]) then
                -- Quest does not have pre-quest, so we add the current quest as pre-quest.
                -- This is not 100% correct, but it will be easier to manually fix invalid breadcrumb quests, than adding pre-quests to all quests.
                mop[nextQuestInChain][questKeys.preQuestSingle] = {questId}
            end
        end
    end
end

-- we grab quests from the retail Trinity DB with a max quest ID. There are some invalid quests in between, which are not MoP quests, so we skip them.
local idsToSkip = {
    [32783] = true,
    [32784] = true,
    [32791] = true,
    [32792] = true,
    [32793] = true,
    [32794] = true,
    [32795] = true,
    [32796] = true,
    [32797] = true,
    [32799] = true,
    [32800] = true,
    [32801] = true,
    [32802] = true,
    [32803] = true,
    [32804] = true,
    [32783] = true,
    [32784] = true,
    [32791] = true,
    [32792] = true,
    [32793] = true,
    [32794] = true,
    [32795] = true,
    [32796] = true,
    [32797] = true,
    [32799] = true,
    [32800] = true,
    [32801] = true,
    [32802] = true,
    [32803] = true,
    [32804] = true,
    [32911] = true,
    [32913] = true,
    [32914] = true,
    [32917] = true,
    [32918] = true,
    [32920] = true,
    [32921] = true,
    [32929] = true,
    [32934] = true,
    [32935] = true,
    [32936] = true,
    [32941] = true,
    [32946] = true,
    [32979] = true,
    [32980] = true,
    [32981] = true,
    [32982] = true,
    [32983] = true,
    [32984] = true,
    [32985] = true,
    [32989] = true,
    [32990] = true,
    [32991] = true,
    [32992] = true,
    [32993] = true,
    [32994] = true,
    [33010] = true,
    [33011] = true,
    [33012] = true,
    [33013] = true,
    [33014] = true,
    [33015] = true,
    [33016] = true,
    [33017] = true,
    [33028] = true,
    [33034] = true,
    [33035] = true,
    [33036] = true,
    [33037] = true,
    [33038] = true,
    [33039] = true,
    [33041] = true,
    [33042] = true,
    [33043] = true,
    [33044] = true,
    [33045] = true,
    [33046] = true,
    [33051] = true,
    [33052] = true,
    [33053] = true,
    [33054] = true,
    [33055] = true,
    [33056] = true,
    [33057] = true,
    [33058] = true,
    [33059] = true,
    [33060] = true,
    [33061] = true,
    [33062] = true,
    [33063] = true,
    [33064] = true,
    [33065] = true,
    [33066] = true,
    [33067] = true,
    [33068] = true,
    [33069] = true,
    [33070] = true,
    [33071] = true,
    [33072] = true,
    [33073] = true,
    [33074] = true,
    [33075] = true,
    [33076] = true,
    [33077] = true,
    [33078] = true,
    [33079] = true,
    [33080] = true,
    [33081] = true,
    [33082] = true,
    [33083] = true,
    [33084] = true,
    [33085] = true,
    [33086] = true,
    [33108] = true,
    [33111] = true,
    [33112] = true,
    [33113] = true,
    [33114] = true,
    [33115] = true,
    [33116] = true,
    [33119] = true,
    [33120] = true,
    [33123] = true,
    [33125] = true,
    [33126] = true,
    [33129] = true,
    [33130] = true,
    [33131] = true,
    [33132] = true,
    [33135] = true,
    [33145] = true,
    [33148] = true,
    [33149] = true,
    [33150] = true,
    [33151] = true,
    [33154] = true,
    [33155] = true,
    [33157] = true,
    [33158] = true,
    [33159] = true,
    [33165] = true,
    [33166] = true,
    [33167] = true,
    [33168] = true,
    [33223] = true,
    [33224] = true,
    [33253] = true,
    [33255] = true,
    [33256] = true,
    [33263] = true,
    [33264] = true,
    [33265] = true,
    [33266] = true,
    [33268] = true,
    [33269] = true,
    [33271] = true,
    [33282] = true,
    [33320] = true,
    [33323] = true,
    [33327] = true,
    [33330] = true,
    [33331] = true,
    [33344] = true,
    [33349] = true,
    [33350] = true,
    [33351] = true,
    [33352] = true,
    [33359] = true,
    [33380] = true,
    [33381] = true,
    [33382] = true,
    [33383] = true,
    [33384] = true,
    [33389] = true,
    [33395] = true,
    [33398] = true,
    [33400] = true,
    [33401] = true,
    [33402] = true,
    [33407] = true,
    [33408] = true,
    [33409] = true,
    [33410] = true,
    [33412] = true,
    [33416] = true,
    [33418] = true,
    [33419] = true,
    [33422] = true,
    [33424] = true,
    [33425] = true,
    [33427] = true,
    [33429] = true,
    [33431] = true,
    [33432] = true,
    [33434] = true,
    [33438] = true,
    [33439] = true,
    [33440] = true,
    [33441] = true,
    [33442] = true,
    [33443] = true,
    [33444] = true,
    [33445] = true,
    [33446] = true,
    [33447] = true,
    [33448] = true,
    [33449] = true,
    [33450] = true,
    [33454] = true,
    [33455] = true,
    [33456] = true,
    [33457] = true,
    [33458] = true,
    [33461] = true,
    [33462] = true,
    [33463] = true,
    [33464] = true,
    [33467] = true,
    [33468] = true,
    [33469] = true,
    [33470] = true,
    [33473] = true,
    [33483] = true,
    [33484] = true,
    [33485] = true,
    [33492] = true,
    [33493] = true,
    [33496] = true,
    [33497] = true,
    [33498] = true,
    [33499] = true,
    [33500] = true,
    [33501] = true,
    [33502] = true,
    [33504] = true,
    [33505] = true,
    [33509] = true,
    [33510] = true,
    [33511] = true,
    [33512] = true,
    [33513] = true,
    [33514] = true,
    [33516] = true,
    [33521] = true,
    [33522] = true,
    [33525] = true,
    [33526] = true,
    [33527] = true,
    [33529] = true,
    [33530] = true,
    [33531] = true,
    [33532] = true,
    [33533] = true,
    [33534] = true,
    [33536] = true,
    [33540] = true,
    [33543] = true,
    [33544] = true,
    [33545] = true,
    [33546] = true,
    [33547] = true,
    [33548] = true,
    [33549] = true,
    [33550] = true,
    [33557] = true,
    [33560] = true,
    [33561] = true,
    [33562] = true,
    [33563] = true,
    [33564] = true,
    [33565] = true,
    [33566] = true,
    [33567] = true,
    [33568] = true,
    [33569] = true,
    [33570] = true,
    [33571] = true,
    [33572] = true,
    [33573] = true,
    [33574] = true,
    [33575] = true,
    [33577] = true,
    [33578] = true,
    [33579] = true,
    [33580] = true,
    [33581] = true,
    [33582] = true,
    [33583] = true,
    [33584] = true,
    [33586] = true,
    [33588] = true,
    [33592] = true,
    [33593] = true,
    [33597] = true,
    [33609] = true,
    [33610] = true,
    [33611] = true,
    [33612] = true,
    [33613] = true,
    [33614] = true,
    [33622] = true,
    [33633] = true,
    [33635] = true,
    [33637] = true,
    [33638] = true,
    [33640] = true,
    [33641] = true,
    [33642] = true,
    [33643] = true,
    [33644] = true,
    [33645] = true,
    [33649] = true,
    [33656] = true,
    [33657] = true,
    [33658] = true,
    [33659] = true,
    [33660] = true,
    [33661] = true,
    [33662] = true,
    [33663] = true,
    [33664] = true,
    [33685] = true,
    [33686] = true,
    [33689] = true,
    [33693] = true,
    [33694] = true,
    [33695] = true,
    [33706] = true,
    [33707] = true,
    [33709] = true,
    [33713] = true,
    [33720] = true,
    [33721] = true,
    [33722] = true,
    [33724] = true,
    [33725] = true,
    [33726] = true,
    [33727] = true,
    [33728] = true,
    [33729] = true,
    [33730] = true,
    [33731] = true,
    [33732] = true,
    [33733] = true,
    [33734] = true,
    [33735] = true,
    [33736] = true,
    [33737] = true,
    [33740] = true,
    [33748] = true,
    [33749] = true,
    [33750] = true,
    [33753] = true,
    [33754] = true,
    [33755] = true,
    [33756] = true,
    [33761] = true,
    [33765] = true,
    [33766] = true,
    [33767] = true,
    [33772] = true,
    [33781] = true,
    [33782] = true,
    [33783] = true,
    [33784] = true,
    [33785] = true,
    [33786] = true,
    [33787] = true,
    [33788] = true,
    [33793] = true,
    [33794] = true,
    [33795] = true,
    [33800] = true,
    [33807] = true,
    [33808] = true,
    [33813] = true,
    [33814] = true,
    [33815] = true,
    [33816] = true,
    [33817] = true,
    [33820] = true,
    [33822] = true,
    [33823] = true,
    [33824] = true,
    [33825] = true,
    [33826] = true,
    [33828] = true,
    [33833] = true,
    [33834] = true,
    [33836] = true,
    [33837] = true,
    [33838] = true,
    [33839] = true,
    [33840] = true,
    [33843] = true,
    [33844] = true,
    [33846] = true,
    [33847] = true,
    [33866] = true,
    [33867] = true,
    [33868] = true,
    [33869] = true,
    [33871] = true,
    [33872] = true,
    [33873] = true,
    [33874] = true,
    [33875] = true,
    [33877] = true,
    [33878] = true,
    [33879] = true,
    [33880] = true,
    [33881] = true,
    [33882] = true,
    [33883] = true,
    [33884] = true,
    [33885] = true,
    [33886] = true,
    [33887] = true,
    [33888] = true,
    [33889] = true,
    [33890] = true,
    [33891] = true,
    [33898] = true,
    [33899] = true,
    [33900] = true,
    [33901] = true,
    [33903] = true,
    [33904] = true,
    [33905] = true,
    [33906] = true,
    [33907] = true,
    [33908] = true,
    [33909] = true,
    [33910] = true,
    [33911] = true,
    [33913] = true,
    [33914] = true,
    [33915] = true,
    [33916] = true,
    [33917] = true,
    [33918] = true,
    [33919] = true,
    [33920] = true,
    [33921] = true,
    [33923] = true,
    [33924] = true,
    [33925] = true,
    [33926] = true,
    [33927] = true,
    [33928] = true,
    [33929] = true,
    [33930] = true,
    [33931] = true,
    [33932] = true,
    [33933] = true,
    [33934] = true,
    [33938] = true,
    [33939] = true,
    [33940] = true,
    [33942] = true,
    [33943] = true,
    [33944] = true,
    [33945] = true,
    [33946] = true,
    [33947] = true,
    [33948] = true,
    [33949] = true,
    [33950] = true,
    [33951] = true,
    [33952] = true,
    [33954] = true,
    [33955] = true,
    [33956] = true,
    [33957] = true,
    [33958] = true,
    [33959] = true,
    [33960] = true,
    [33961] = true,
    [33962] = true,
    [33963] = true,
    [33964] = true,
    [33965] = true,
    [33966] = true,
    [33967] = true,
    [33968] = true,
    [33969] = true,
    [33970] = true,
    [33971] = true,
    [33972] = true,
    [33973] = true,
    [33975] = true,
    [33976] = true,
    [33977] = true,
    [33978] = true,
    [33979] = true,
    [33980] = true,
    [33981] = true,
    [33982] = true,
    [33987] = true,
    [33988] = true,
    [33989] = true,
    [33990] = true,
    [33991] = true,
    [33995] = true,
    [33996] = true,
    [33997] = true,
    [33998] = true,
    [34004] = true,
    [34006] = true,
    [34008] = true,
    [34012] = true,
    [34013] = true,
    [34014] = true,
    [34015] = true,
    [34016] = true,
    [34019] = true,
    [34024] = true,
    [34025] = true,
    [34026] = true,
    [34027] = true,
    [34028] = true,
    [34029] = true,
    [34030] = true,
    [34031] = true,
    [34032] = true,
    [34033] = true,
    [34034] = true,
    [34035] = true,
    [34039] = true,
    [34040] = true,
    [34041] = true,
    [34042] = true,
    [34043] = true,
    [34047] = true,
    [34048] = true,
    [34053] = true,
    [34054] = true,
    [34055] = true,
}

-- add trinity quests that are not in Skyfire
for questId, data in pairs(mopTrinity) do
    if (not idsToSkip[questId]) and (not mop[questId]) then
        mop[questId] = data
    end
end

printToFile(mop, questKeys)
